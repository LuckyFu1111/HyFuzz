"""Vulnerability fixtures that mirror common server responses."""
from __future__ import annotations

from typing import Dict, Iterable, List


_SAMPLE_VULNERABILITIES: List[Dict[str, str]] = [
    {
        "id": "vuln-coap-weak-auth",
        "protocol": "coap",
        "severity": "medium",
        "title": "Weak authentication on CoAP endpoint",
    },
    {
        "id": "vuln-modbus-broadcast",
        "protocol": "modbus",
        "severity": "high",
        "title": "Broadcast write not validated",
    },
]


def as_list() -> List[Dict[str, str]]:
    """Return vulnerability dictionaries."""
    return list(_SAMPLE_VULNERABILITIES)


def ids() -> Iterable[str]:
    """Yield all vulnerability identifiers."""
    return (item["id"] for item in _SAMPLE_VULNERABILITIES)


def by_protocol(protocol: str) -> List[Dict[str, str]]:
    """Filter vulnerabilities by protocol (case insensitive)."""
    normalized = protocol.lower().strip()
    return [item for item in _SAMPLE_VULNERABILITIES if item["protocol"] == normalized]


if __name__ == "__main__":  # pragma: no cover - informal verification
    for protocol in {item["protocol"] for item in _SAMPLE_VULNERABILITIES}:
        print(protocol, "->", len(by_protocol(protocol)), "entries")
